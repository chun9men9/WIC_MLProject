ggplot(house_train, aes(x=as.factor(OverallQual),y=log(SalePrice)))+geom_violin()+geom_boxplot(width=.1)
log(50000)
log(10000)
ggplot(house_train, aes(x=as.factor(OverallQual),y=SalePrice))+geom_violin()+geom_boxplot(width=.1)
plot(house_train$OverallQual,house_train$SalePrice)
knitr::opts_chunk$set(echo = TRUE)
house_train <- read.csv("../data/train.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
plot(house_train$OverallQual,house_train$SalePrice)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("C:/Users/cmlim/Desktop/Machine Learning Project/chungmeng")
house_train <- read.csv("../data/train.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
## load test data
house_test <- read.csv("../data/test.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
## get levels of categorical features from data description
factorLevel <- list()
conn <- file("../data/data_description.txt", open="r")
f <-readLines(conn)
for (line in f){
if(!grepl("^[[:blank:]]", line) & grepl(": ", line)) {
col_name <<- trimws(gsub(":.*", "", line))
} else {
level <- trimws(gsub("\t.*", "", line))
if (level != "") {
factorLevel[[col_name]] <- c(factorLevel[[col_name]], level)
}
}
}
close(conn)
print(factorLevel[1:6])
## check if levels in description cover unique data values
for (varname in names(factorLevel)) {
levelDiff <- setdiff(unique(house_train[[varname]]),
factorLevel[[varname]])
if(length(levelDiff)) {
print(paste(varname,
paste(levelDiff, collapse = ", "),
sep = ": "))
}
}
## fix those levels that don't match with data
## ignore "NA" as they will be considered as missing when converting categorical to factors
unique(house_train$MSZoning)
factorLevel$MSZoning
factorLevel$MSZoning[2] <- "C (all)"
unique(house_train$Neighborhood)
factorLevel$Neighborhood
factorLevel$Neighborhood[13] <- "NAmes"
unique(house_train$BldgType)
factorLevel$BldgType
factorLevel$BldgType[c(2,3,5)] <- c("2fmCon","Duplex","Twnhs")
unique(house_train$Exterior2nd)
factorLevel$Exterior2nd
factorLevel$Exterior2nd[c(17,6,3)] <- c("Wd Shng","CmentBd","Brk Cmn")
## Get levels that only appear in the dataset
for (varname in names(factorLevel)) {
factorLevel[[varname]] <- intersect(factorLevel[[varname]],
unique(house_train[[varname]]))
}
## Re-run the previous cell to double check
## convert column datatype to numeric / factor
## On training dataset
for (varname in names(house_train)[-1]) {
if (varname %in% names(factorLevel)) {
house_train[[varname]] <- factor(house_train[[varname]],
levels = factorLevel[[varname]])
} else {
house_train[[varname]] <- as.numeric(house_train[[varname]])
}
}
## On testing dataset
for (varname in names(house_test)[-1]) {
if (varname %in% names(factorLevel)) {
house_test[[varname]] <- factor(house_test[[varname]],
levels = factorLevel[[varname]])
} else {
house_test[[varname]] <- as.numeric(house_test[[varname]])
}
}
house_train$OverallQual=as.numeric(house_train$OverallQual)
house_test$OverallQual=as.numeric(house_test$OverallQual)
names(house_train)
shortlis=c('MSZoning','Neighborhood','HouseStyle','OverallQual','YearBuilt',
'ExterQual','Foundation','BsmtQual','X1stFlrSF','X2ndFlrSF','GrLivArea',
'FullBath','TotRmsAbvGrd','GarageFinish','GarageCars','GarageArea',
'PavedDrive','SaleType','SaleCondition')
house_train=house_train[,c(shortlis,'SalePrice')]
house_test=house_test[,shortlis]
View(house_train)
View(house_test)
house_train$Id <- NULL
rownames(house_test) <- house_test$Id
house_test$Id <- NULL
save(house_train, house_test, file = "./house_loaded.RData")
plot(house_train$OverallQual,house_train$SalePrice)
rm(list=ls())
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("C:/Users/cmlim/Desktop/Machine Learning Project/chungmeng")
house_train <- read.csv("../data/train.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
## load test data
house_test <- read.csv("../data/test.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("C:/Users/cmlim/Desktop/Machine Learning Project/chungmeng")
house_train <- read.csv("../data/train.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
## load test data
house_test <- read.csv("../data/test.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
setwd("C:/Users/cmlim/Dropbox/NYC Data Science/Class/Machine Learning Project/chungmeng")
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("C:/Users/cmlim/Dropbox/NYC Data Science/Class/Machine Learning Project/chungmeng")
house_train <- read.csv("../data/train.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
## load test data
house_test <- read.csv("../data/test.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
plot(house_train$OverallQual,house_train$SalePrice)
## get levels of categorical features from data description
factorLevel <- list()
conn <- file("../data/data_description.txt", open="r")
f <-readLines(conn)
for (line in f){
if(!grepl("^[[:blank:]]", line) & grepl(": ", line)) {
col_name <<- trimws(gsub(":.*", "", line))
} else {
level <- trimws(gsub("\t.*", "", line))
if (level != "") {
factorLevel[[col_name]] <- c(factorLevel[[col_name]], level)
}
}
}
close(conn)
print(factorLevel[1:6])
## check if levels in description cover unique data values
for (varname in names(factorLevel)) {
levelDiff <- setdiff(unique(house_train[[varname]]),
factorLevel[[varname]])
if(length(levelDiff)) {
print(paste(varname,
paste(levelDiff, collapse = ", "),
sep = ": "))
}
}
plot(house_train$OverallQual,house_train$SalePrice)
## fix those levels that don't match with data
## ignore "NA" as they will be considered as missing when converting categorical to factors
unique(house_train$MSZoning)
factorLevel$MSZoning
factorLevel$MSZoning[2] <- "C (all)"
unique(house_train$Neighborhood)
factorLevel$Neighborhood
factorLevel$Neighborhood[13] <- "NAmes"
unique(house_train$BldgType)
factorLevel$BldgType
factorLevel$BldgType[c(2,3,5)] <- c("2fmCon","Duplex","Twnhs")
unique(house_train$Exterior2nd)
factorLevel$Exterior2nd
factorLevel$Exterior2nd[c(17,6,3)] <- c("Wd Shng","CmentBd","Brk Cmn")
## Get levels that only appear in the dataset
for (varname in names(factorLevel)) {
factorLevel[[varname]] <- intersect(factorLevel[[varname]],
unique(house_train[[varname]]))
}
## Re-run the previous cell to double check
plot(house_train$OverallQual,house_train$SalePrice)
## convert column datatype to numeric / factor
## On training dataset
for (varname in names(house_train)[-1]) {
if (varname %in% names(factorLevel)) {
house_train[[varname]] <- factor(house_train[[varname]],
levels = factorLevel[[varname]])
} else {
house_train[[varname]] <- as.numeric(house_train[[varname]])
}
}
## On testing dataset
for (varname in names(house_test)[-1]) {
if (varname %in% names(factorLevel)) {
house_test[[varname]] <- factor(house_test[[varname]],
levels = factorLevel[[varname]])
} else {
house_test[[varname]] <- as.numeric(house_test[[varname]])
}
}
house_train$OverallQual=as.numeric(house_train$OverallQual)
house_test$OverallQual=as.numeric(house_test$OverallQual)
plot(house_train$OverallQual,house_train$SalePrice)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("C:/Users/cmlim/Dropbox/NYC Data Science/Class/Machine Learning Project/chungmeng")
house_train <- read.csv("../data/train.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
## load test data
house_test <- read.csv("../data/test.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
## get levels of categorical features from data description
factorLevel <- list()
conn <- file("../data/data_description.txt", open="r")
f <-readLines(conn)
for (line in f){
if(!grepl("^[[:blank:]]", line) & grepl(": ", line)) {
col_name <<- trimws(gsub(":.*", "", line))
} else {
level <- trimws(gsub("\t.*", "", line))
if (level != "") {
factorLevel[[col_name]] <- c(factorLevel[[col_name]], level)
}
}
}
close(conn)
print(factorLevel[1:6])
plot(house_train$OverallQual,house_train$SalePrice)
## check if levels in description cover unique data values
for (varname in names(factorLevel)) {
levelDiff <- setdiff(unique(house_train[[varname]]),
factorLevel[[varname]])
if(length(levelDiff)) {
print(paste(varname,
paste(levelDiff, collapse = ", "),
sep = ": "))
}
}
## fix those levels that don't match with data
## ignore "NA" as they will be considered as missing when converting categorical to factors
unique(house_train$MSZoning)
factorLevel$MSZoning
factorLevel$MSZoning[2] <- "C (all)"
unique(house_train$Neighborhood)
factorLevel$Neighborhood
factorLevel$Neighborhood[13] <- "NAmes"
unique(house_train$BldgType)
factorLevel$BldgType
factorLevel$BldgType[c(2,3,5)] <- c("2fmCon","Duplex","Twnhs")
unique(house_train$Exterior2nd)
factorLevel$Exterior2nd
factorLevel$Exterior2nd[c(17,6,3)] <- c("Wd Shng","CmentBd","Brk Cmn")
## Get levels that only appear in the dataset
for (varname in names(factorLevel)) {
factorLevel[[varname]] <- intersect(factorLevel[[varname]],
unique(house_train[[varname]]))
}
## Re-run the previous cell to double check
plot(house_train$OverallQual,house_train$SalePrice)
## convert column datatype to numeric / factor
## On training dataset
for (varname in names(house_train)[-1]) {
if (varname %in% names(factorLevel)) {
house_train[[varname]] <- factor(house_train[[varname]],
levels = factorLevel[[varname]])
} else {
house_train[[varname]] <- as.numeric(house_train[[varname]])
}
}
## On testing dataset
for (varname in names(house_test)[-1]) {
if (varname %in% names(factorLevel)) {
house_test[[varname]] <- factor(house_test[[varname]],
levels = factorLevel[[varname]])
} else {
house_test[[varname]] <- as.numeric(house_test[[varname]])
}
}
#house_train$OverallQual=as.numeric(house_train$OverallQual)
#house_test$OverallQual=as.numeric(house_test$OverallQual)
plot(house_train$OverallQual,house_train$SalePrice)
as.numeric(house_train$OverallQual)
house_train2$OverallQual=as.numeric(house_train$OverallQual)
house_train$OverallQual2=as.numeric(house_train$OverallQual)
house_train%>%select(OverallQual,OverallQual2)
house_train$OverallQual2=as.numeric(as.character(house_train$OverallQual))
house_train%>%select(OverallQual,OverallQual2)
house_train$OverallQual3=as.factor(house_train$OverallQual2)
house_train%>%select(OverallQual,OverallQual2,OverallQual3)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("C:/Users/cmlim/Dropbox/NYC Data Science/Class/Machine Learning Project/chungmeng")
house_train <- read.csv("../data/train.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
## load test data
house_test <- read.csv("../data/test.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
## get levels of categorical features from data description
factorLevel <- list()
conn <- file("../data/data_description.txt", open="r")
f <-readLines(conn)
for (line in f){
if(!grepl("^[[:blank:]]", line) & grepl(": ", line)) {
col_name <<- trimws(gsub(":.*", "", line))
} else {
level <- trimws(gsub("\t.*", "", line))
if (level != "") {
factorLevel[[col_name]] <- c(factorLevel[[col_name]], level)
}
}
}
close(conn)
print(factorLevel[1:6])
## check if levels in description cover unique data values
for (varname in names(factorLevel)) {
levelDiff <- setdiff(unique(house_train[[varname]]),
factorLevel[[varname]])
if(length(levelDiff)) {
print(paste(varname,
paste(levelDiff, collapse = ", "),
sep = ": "))
}
}
## fix those levels that don't match with data
## ignore "NA" as they will be considered as missing when converting categorical to factors
unique(house_train$MSZoning)
factorLevel$MSZoning
factorLevel$MSZoning[2] <- "C (all)"
unique(house_train$Neighborhood)
factorLevel$Neighborhood
factorLevel$Neighborhood[13] <- "NAmes"
unique(house_train$BldgType)
factorLevel$BldgType
factorLevel$BldgType[c(2,3,5)] <- c("2fmCon","Duplex","Twnhs")
unique(house_train$Exterior2nd)
factorLevel$Exterior2nd
factorLevel$Exterior2nd[c(17,6,3)] <- c("Wd Shng","CmentBd","Brk Cmn")
## Get levels that only appear in the dataset
for (varname in names(factorLevel)) {
factorLevel[[varname]] <- intersect(factorLevel[[varname]],
unique(house_train[[varname]]))
}
## Re-run the previous cell to double check
## convert column datatype to numeric / factor
## On training dataset
for (varname in names(house_train)[-1]) {
if (varname %in% names(factorLevel)) {
house_train[[varname]] <- factor(house_train[[varname]],
levels = factorLevel[[varname]])
} else {
house_train[[varname]] <- as.numeric(house_train[[varname]])
}
}
## On testing dataset
for (varname in names(house_test)[-1]) {
if (varname %in% names(factorLevel)) {
house_test[[varname]] <- factor(house_test[[varname]],
levels = factorLevel[[varname]])
} else {
house_test[[varname]] <- as.numeric(house_test[[varname]])
}
}
#Convert OverallQual from Factor to Numeric
house_train$OverallQual=as.numeric(as.character(house_train$OverallQual))
house_test$OverallQual=as.numeric(as.character(house_test$OverallQual))
names(house_train)
shortlis=c('MSZoning','Neighborhood','HouseStyle','OverallQual','YearBuilt',
'ExterQual','Foundation','BsmtQual','X1stFlrSF','X2ndFlrSF','GrLivArea',
'FullBath','TotRmsAbvGrd','GarageFinish','GarageCars','GarageArea',
'PavedDrive','SaleType','SaleCondition')
house_train=house_train[,c(shortlis,'SalePrice')]
house_test=house_test[,shortlis]
View(house_train)
View(house_test)
house_train$Id <- NULL
rownames(house_test) <- house_test$Id
house_test$Id <- NULL
save(house_train, house_test, file = "./house_loaded.RData")
load('house_loaded.RData')
plot(house_train$OverallQual,house_train$SalePrice)
ggplot(house_train, aes(x=OverallQual,y=SalePrice))+geom_violin()+geom_boxplot(width=.1)
ggplot(house_train, aes(x=as.factor(OverallQual),y=SalePrice))+geom_violin()+geom_boxplot(width=.1)
ggplot(house_train, aes(x=as.factor(OverallQual),y=log(SalePrice)))+geom_violin()+geom_boxplot(width=.1)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("C:/Users/cmlim/Dropbox/NYC Data Science/Class/Machine Learning Project/chungmeng")
house_train <- read.csv("../data/train.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
## load test data
house_test <- read.csv("../data/test.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
## get levels of categorical features from data description
factorLevel <- list()
conn <- file("../data/data_description.txt", open="r")
f <-readLines(conn)
for (line in f){
if(!grepl("^[[:blank:]]", line) & grepl(": ", line)) {
col_name <<- trimws(gsub(":.*", "", line))
} else {
level <- trimws(gsub("\t.*", "", line))
if (level != "") {
factorLevel[[col_name]] <- c(factorLevel[[col_name]], level)
}
}
}
close(conn)
print(factorLevel[1:6])
## check if levels in description cover unique data values
for (varname in names(factorLevel)) {
levelDiff <- setdiff(unique(house_train[[varname]]),
factorLevel[[varname]])
if(length(levelDiff)) {
print(paste(varname,
paste(levelDiff, collapse = ", "),
sep = ": "))
}
}
## fix those levels that don't match with data
## ignore "NA" as they will be considered as missing when converting categorical to factors
unique(house_train$MSZoning)
factorLevel$MSZoning
factorLevel$MSZoning[2] <- "C (all)"
unique(house_train$Neighborhood)
factorLevel$Neighborhood
factorLevel$Neighborhood[13] <- "NAmes"
unique(house_train$BldgType)
factorLevel$BldgType
factorLevel$BldgType[c(2,3,5)] <- c("2fmCon","Duplex","Twnhs")
unique(house_train$Exterior2nd)
factorLevel$Exterior2nd
factorLevel$Exterior2nd[c(17,6,3)] <- c("Wd Shng","CmentBd","Brk Cmn")
## Get levels that only appear in the dataset
for (varname in names(factorLevel)) {
factorLevel[[varname]] <- intersect(factorLevel[[varname]],
unique(house_train[[varname]]))
}
## Re-run the previous cell to double check
## convert column datatype to numeric / factor
## On training dataset
for (varname in names(house_train)[-1]) {
if (varname %in% names(factorLevel)) {
house_train[[varname]] <- factor(house_train[[varname]],
levels = factorLevel[[varname]])
} else {
house_train[[varname]] <- as.numeric(house_train[[varname]])
}
}
## On testing dataset
for (varname in names(house_test)[-1]) {
if (varname %in% names(factorLevel)) {
house_test[[varname]] <- factor(house_test[[varname]],
levels = factorLevel[[varname]])
} else {
house_test[[varname]] <- as.numeric(house_test[[varname]])
}
}
#Convert OverallQual from Factor to Numeric
#house_train$OverallQual=as.numeric(as.character(house_train$OverallQual))
#house_test$OverallQual=as.numeric(as.character(house_test$OverallQual))
names(house_train)
shortlis=c('MSZoning','Neighborhood','HouseStyle','OverallQual','YearBuilt',
'ExterQual','Foundation','BsmtQual','X1stFlrSF','X2ndFlrSF','GrLivArea',
'FullBath','TotRmsAbvGrd','GarageFinish','GarageCars','GarageArea',
'PavedDrive','SaleType','SaleCondition')
house_train=house_train[,c(shortlis,'SalePrice')]
house_test=house_test[,shortlis]
View(house_train)
View(house_test)
house_train$Id <- NULL
rownames(house_test) <- house_test$Id
house_test$Id <- NULL
save(house_train, house_test, file = "./house_loaded.RData")
load('house_loaded.RData')
ggplot(house_train, aes(x=OverallQual,y=log(SalePrice)))+geom_violin()+geom_boxplot(width=.1)
house_train%>%group_by(OverallQual)%>%summarise(sd,min,max,median)
house_train%>%group_by(OverallQual)%>%summarise(std,min,max,median)
house_train%>%group_by(OverallQual)%>%summarise(sdev,min,max,median)
house_train%>%group_by(OverallQual)%>%summarise(sd(SalePrice),min(SalePrice),max(SalePrice),median(SalePrice))
house_train%>%group_by(OverallQual)%>%summarise(sd(SalePrice),min(SalePrice),max(SalePrice),mean(SalePrice))
