library(dplyr)
library(data.table)
name_vec <- c("MSZoning", "Neighborhood", "HouseStyle", "OverallQual", "YearBuilt", "ExterQual",
"Foundation", "BsmtQual", "X1stFlrSF", "X2ndFlrSF", "GrLivArea", "FullBath",
"TotRmsAbvGrd" ,"GarageFinish", "GarageCars", "GarageArea", "GarageQual",
"GarageCond", "PavedDrive", "SaleType", "SaleCondition")
train_sub <- house_train %>% select(., name_vec)
View(train_sub)
View(train_sub)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE,
tidy=FALSE,
fig.height=6,
fig.width=10)
# setwd("~/Workspace/kaggle/housePriceAmes/")
## load training data
house_train <- read.csv("./train.csv",
header = TRUE,
na.strings = c("","NA"),
stringsAsFactors = FALSE)
## load test data
house_test <- read.csv("./test.csv",
header = TRUE,
na.strings = c("", "NA"),
stringsAsFactors = FALSE)
dim(house_train)
dim(house_test)
str(house_train)
## get levels of categorical features from data description
factorLevel <- list()
conn <- file("./data_description.txt", open="r")
f <-readLines(conn)
for (line in f){
if(!grepl("^[[:blank:]]", line) & grepl(": ", line)) {
col_name <<- trimws(gsub(":.*", "", line))
} else {
level <- trimws(gsub("\t.*", "", line))
if (level != "") {
factorLevel[[col_name]] <- c(factorLevel[[col_name]], level)
}
}
}
close(conn)
print(factorLevel[1:6])
## check if levels in description cover unique data values
for (varname in names(factorLevel)) {
levelDiff <- setdiff(unique(house_train[[varname]]),
factorLevel[[varname]])
if(length(levelDiff)) {
print(paste(varname,
paste(levelDiff, collapse = ", "),
sep = ": "))
}
}
## fix those levels that don't match with data
## ignore "NA" as they will be considered as missing when converting categorical to factors
unique(house_train$MSZoning)
factorLevel$MSZoning
factorLevel$MSZoning[2] <- "C (all)"
unique(house_train$Neighborhood)
factorLevel$Neighborhood
factorLevel$Neighborhood[13] <- "NAmes"
unique(house_train$BldgType)
factorLevel$BldgType
factorLevel$BldgType[c(2,3,5)] <- c("2fmCon","Duplex","Twnhs")
unique(house_train$Exterior2nd)
factorLevel$Exterior2nd
factorLevel$Exterior2nd[c(17,6,3)] <- c("Wd Shng","CmentBd","Brk Cmn")
## Get levels that only appear in the dataset
for (varname in names(factorLevel)) {
factorLevel[[varname]] <- intersect(factorLevel[[varname]],
unique(house_train[[varname]]))
}
## Re-run the previous cell to double check
## convert column datatype to numeric / factor
## On training dataset
for (varname in names(house_train)[-1]) {
if (varname %in% names(factorLevel)) {
house_train[[varname]] <- factor(house_train[[varname]],
levels = factorLevel[[varname]])
} else {
house_train[[varname]] <- as.numeric(house_train[[varname]])
}
}
## On testing dataset
for (varname in names(house_test)[-1]) {
if (varname %in% names(factorLevel)) {
house_test[[varname]] <- factor(house_test[[varname]],
levels = factorLevel[[varname]])
} else {
house_test[[varname]] <- as.numeric(house_test[[varname]])
}
}
## load training data
house_train <- read.csv("./train.csv",
header = TRUE,
na.strings = c("", "NA"),
stringsAsFactors = FALSE)
## load test data
house_test <- read.csv("./test.csv",
header = TRUE,
na.strings = c("", "NA",
stringsAsFactors = FALSE)
dim(house_train)
## load training data
house_train <- read.csv("./train.csv",
header = TRUE,
na.strings = c("", "NA"),
stringsAsFactors = FALSE)
## load test data
house_test <- read.csv("./test.csv",
header = TRUE,
na.strings = c("", "NA"),
stringsAsFactors = FALSE)
dim(house_train)
dim(house_test)
str(house_train)
## get levels of categorical features from data description
factorLevel <- list()
conn <- file("data_description.txt", open="r")
f <-readLines(conn)
for (line in f){
if(!grepl("^[[:blank:]]", line) & grepl(": ", line)) {
col_name <<- trimws(gsub(":.*", "", line))
} else {
level <- trimws(gsub("\t.*", "", line))
if (level != "") {
factorLevel[[col_name]] <- c(factorLevel[[col_name]], level)
}
}
}
close(conn)
print(factorLevel[1:6])
## check if levels in description cover unique data values
for (varname in names(factorLevel)) {
levelDiff <- setdiff(unique(house_train[[varname]]),
factorLevel[[varname]])
if(length(levelDiff)) {
print(paste(varname,
paste(levelDiff, collapse = ", "),
sep = ": "))
}
}
## fix those levels that don't match with data
## ignore "NA" as they will be considered as missing when converting categorical to factors
unique(house_train$MSZoning)
factorLevel$MSZoning
factorLevel$MSZoning[2] <- "C (all)"
unique(house_train$Neighborhood)
factorLevel$Neighborhood
factorLevel$Neighborhood[13] <- "NAmes"
unique(house_train$BldgType)
factorLevel$BldgType
factorLevel$BldgType[c(2,3,5)] <- c("2fmCon","Duplex","Twnhs")
unique(house_train$Exterior2nd)
factorLevel$Exterior2nd
factorLevel$Exterior2nd[c(17,6,3)] <- c("Wd Shng","CmentBd","Brk Cmn")
## Get levels that only appear in the dataset
for (varname in names(factorLevel)) {
factorLevel[[varname]] <- intersect(factorLevel[[varname]],
unique(house_train[[varname]]))
}
## Re-run the previous cell to double check
## convert column datatype to numeric / factor
## On training dataset
for (varname in names(house_train)[-1]) {
if (varname %in% names(factorLevel)) {
house_train[[varname]] <- factor(house_train[[varname]],
levels = factorLevel[[varname]])
} else {
house_train[[varname]] <- as.numeric(house_train[[varname]])
}
}
## On testing dataset
for (varname in names(house_test)[-1]) {
if (varname %in% names(factorLevel)) {
house_test[[varname]] <- factor(house_test[[varname]],
levels = factorLevel[[varname]])
} else {
house_test[[varname]] <- as.numeric(house_test[[varname]])
}
}
house_train$Id <- NULL
rownames(house_test) <- house_test$Id
house_test$Id <- NULL
save(house_test, file = "house_test.Rda" )
save(house_train, file =  "house_train.Rda")
name_vec <- c("MSZoning", "Neighborhood", "HouseStyle", "OverallQual", "YearBuilt", "ExterQual",
"Foundation", "BsmtQual", "X1stFlrSF", "X2ndFlrSF", "GrLivArea", "FullBath",
"TotRmsAbvGrd" ,"GarageFinish", "GarageCars", "GarageArea", "GarageQual",
"GarageCond", "PavedDrive", "SaleType", "SaleCondition")
train_sub <- house_train %>% select(., name_vec)
library(VIM)
library(caret)
library(RANN)
## check missing values
col_missing <- names(house_train)[colSums(is.na(house_train)) > 0]
aggr(house_train[,col_missing], prop = F, numbers = T)
Filter(function(x) x > 0, colSums(is.na(house_train)))
## check missing values
col_missing <- names(house_train)[colSums(is.na(train_sub)) > 0]
aggr(train_sub[,col_missing], prop = F, numbers = T)
## check missing values
col_missing <- names(train_sub[colSums(is.na(train_sub)) > 0])
aggr(train_sub[,col_missing], prop = F, numbers = T)
Filter(function(x) x > 0, colSums(is.na(train_sub)))
View(train_sub)
col_missing <- names(train_sub[colSums(is.na(train_sub)) > 0])
aggr(train_sub[,col_missing], prop = F, numbers = T)
Filter(function(x) x > 0, colSums(is.na(train_sub)))
col_missing <- names(train_sub[colSums(is.na(train_sub)) > 0])
missing_df <- train_sub[,col_missing]
aggr(missing_df)
Filter(function(x) x > 0, colSums(is.na(train_sub)))
aggr(missing_df)
col_missing <- names(train_sub[colSums(is.na(train_sub)) > 0])
missing_df <- train_sub[,col_missing]
aggr(missing_df, labels = TRUE)
Filter(function(x) x > 0, colSums(is.na(train_sub)))
col_missing <- names(train_sub[colSums(is.na(train_sub)) > 0])
missing_df <- train_sub[,col_missing]
aggr(missing_df, labels = axes)
col_missing <- names(train_sub[colSums(is.na(train_sub)) > 0])
missing_df <- train_sub[,col_missing]
aggr(missing_df)
Filter(function(x) x > 0, colSums(is.na(train_sub)))
missing_df[is.na(missing_df)]
missing_df[is.na(missing_df),]
train_sub[is.na(train_sub),]
View(train_sub)
train_sub[is.na(train_sub),]
is.na(train_sub)
train_sub[is.na(train_sub),]
train_sub[is.na(train_sub) == TRUE,]
train_sub[(train_sub) == TRUE,]
train_sub[is.na(train_sub),]
train_subdt <-as.data.table(train_sub)
train_subdt <-as.data.table(train_sub)
train_subdt[is.na(train_subdt),]
train_subdt <-as.data.table(train_sub)
train_subdt[is.na.(~.),]
train_subdt <-as.data.table(train_sub)
train_subdt[is.na(~.),]
train_subdt <-as.data.table(train_sub)
train_subdt[is.na(~),]
train_sub %>% select(., is.na())
train_sub[is.na(train_sub),]
train_sub[,is.na(train_sub)]
train_sub[,is.na(train_sub)]
train_sub[is.na(train_sub)]
class(train_sub)
train_sub[sum(is.na(train_sub))>0,]
train_sub[rowSums(is.na(train_sub))>0,]
trains_sub[rowSums(is.na(train_sub))>3,]
train_sub[rowSums(is.na(train_sub))>3,]
missing_df <- train_sub[rowSums(is.na(train_sub))>0,] #checking all observations with missing
View(missing_df)
View(house_train)
train_sub <- data.table(train_sub)
train_sub[is.na(train_sub) == TRUE, .SD := "None" ]
View(train_sub)
train_sub <- data.table(train_sub)
train_sub[is.na(train_sub), .SD := "None" ]
train_sub[is.na(train_sub),]
train_sub <- data.table(train_sub)
train_sub[is.na(train_sub)] = "None"
View(train_sub)
train_sub[rowSums(is.na(train_sub))>0,]
train_sub[is.na(train_sub)] = "None"
View(train_sub)
train_sub[rowSums(is.na(train_sub))>0,]
train_sub$BsmtQual[is.na(BsmtQual)]
train_sub$BsmtQual[is.na(train_sub$BsmtQual)]
train_sub$BsmtQual[is.na(train_sub$BsmtQual)] = "None"
train_sub$BsmtQual[is.na(train_sub$BsmtQual)]
train_sub$BsmtQual = ifelse(is.na(train_sub$BsmtQual), as.factor("None"), train_sub$BsmtQual)
train_sub$BsmtQual[is.na(train_sub$BsmtQual)]
class(train_sub$BsmtQual)
View(train_sub)
train_sub <- data.table(train_sub)
View(train_sub)
train_sub <- house_train %>% select(., name_vec)
train_sub <- data.table(train_sub)
View(train_sub)
train_sub$BsmtQual[is.na(train_sub$BsmtQual), ] <- "None"
train_sub$BsmtQual[is.na(train_sub$BsmtQual), ]
train_sub$BsmtQual[is.na(train_sub$BsmtQual)]
train_sub$BsmtQual[is.na(train_sub$BsmtQual)] <- "None"
train_sub$BsmtQual[is.na(train_sub$BsmtQual)]
x <- train_sub$BsmtQual[is.na(train_sub$BsmtQual)]
x
x <- as.factor("None")
x
x <- train_sub$BsmtQual[is.na(train_sub$BsmtQual)]
x <- as.factor("NA")
x
x <- train_sub$BsmtQual[is.na(train_sub$BsmtQual)]
x <- "None"
x
x <- train_sub$BsmtQual[is.na(train_sub$BsmtQual)]
length(x)
class(x)
train_sub$BsmtQual[is.na(train_sub$BsmtQual), BsmtQual := "None"]
train_sub <- data.table(train_sub)
train_sub$BsmtQual[is.na(train_sub$BsmtQual), BsmtQual := "None"]
train_sub <- data.table(train_sub)
train_sub[is.na(train_sub$BsmtQual), BsmtQual := "None"]
View(train_sub)
train_sub$BsmtQual[is.na(train_sub$BsmtQual)]
View(train_sub)
train_sub[is.na(train_sub$GarageFinish), GarageFinish := "None"]
train_sub[is.na(train_sub$GarageQual), GarageQual := "None"]
train_sub[is.na(train_sub$GarageCond), GarageCond := "None"]
train_sub[rowSums(is.na(train_sub))>0,]
sum(is.na(train_sub))
save(training_sub, file = "training_sub.Rda")
save(train_sub, file = "training_sub.Rda")
save(train_sub, file = "train_sub.Rda")
str(train_sub)
levels(train_sub)
sapply(train_sub, function (x), levels)
sapply(train_sub, function (x) levels(x))
levels_sub = sapply(train_sub, function (x) levels(x))
levels_sub
train_sub[$PavedDrive == "N", PavedDrive := "None"]
train_sub[PavedDrive == "N", PavedDrive := "None"]
levels_sub = sapply(train_sub, function (x) levels(x))
save(train_sub, file = "train_sub.Rda")
levels
levels_sub
View(train_sub)
x = train_sub[train_sub == "None"]
x = train_sub[train_sub == "None",]
x = [train_sub == "None",]
x = [train_sub == "None"]
train_sub == "None"
x <-  train_sub == "None"
x
View(x)
x <-  train_sub[train_sub == "None"]
x <-  train_sub[train_sub == "None",]
View(x)
x <-  train_sub[sum(train_sub == "None")>0,]
x <-  train_sub[GarageFinish == PavedDrive,]
x <-  train_sub[GarageFinish == "None" & PavedDrive== "None",]
x <-  train_sub[GarageCond == "None" & PavedDrive== "None",]
x <-  train_sub[GarageFinish == "None" & GarageCars== 0,]
View(x)
x <-  train_sub[GarageCars== 0,]
View(x)
table(garageCars)
table(train_sub$GarageCars)
levels_sub
table(train_sub$GarageCars, train_sub$GarageFinish)
View(train_sub)
save(train_sub, file = "train_sub.Rda")
View(train_sub)
save(train_sub, file = "train_sub.Rda")
View(train_sub)
load("~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_3/WIC_MLProject/Wing/DataFrames/train_sub.Rda")
getwd()
setwd("~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_3/WIC_MLProject/Wing/DataFrames"
setwd("~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_3/WIC_MLProject/Wing/DataFrames")
write.csv(train_sub, file = "train_sub.csv")
load("~/Documents/NYDSA/12-Week_Bootcamp/Projects/Project_3/WIC_MLProject/Wing/DataFrames/house_train.Rda")
View(house_train)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE,
tidy=FALSE,
fig.height=6,
fig.width=10)
```{r initialization}
library(caret)
house_train <- read.csv("./train.csv",
header = TRUE,
na.strings = c("", "NA"),
stringsAsFactors = FALSE)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE,
tidy=FALSE,
fig.height=6,
fig.width=10)
```{r initialization}
library(ggplot2)
library(ggplot2)
library(dplyr)
library(data.table)
library(VIM)
library(caret)
library(RANN)
## load training data
house_train <- read.csv("./train.csv",
header = TRUE,
na.strings = c("", "NA"),
stringsAsFactors = FALSE)
## load test data
house_test <- read.csv("./test.csv",
header = TRUE,
na.strings = c("", "NA"),
stringsAsFactors = FALSE)
dim(house_train)
dim(house_test)
str(house_train)
## get levels of categorical features from data description
factorLevel <- list()
conn <- file("data_description.txt", open="r")
f <-readLines(conn)
for (line in f){
if(!grepl("^[[:blank:]]", line) & grepl(": ", line)) {
col_name <<- trimws(gsub(":.*", "", line))
} else {
level <- trimws(gsub("\t.*", "", line))
if (level != "") {
factorLevel[[col_name]] <- c(factorLevel[[col_name]], level)
}
}
}
close(conn)
print(factorLevel[1:6])
## check if levels in description cover unique data values
for (varname in names(factorLevel)) {
levelDiff <- setdiff(unique(house_train[[varname]]),
factorLevel[[varname]])
if(length(levelDiff)) {
print(paste(varname,
paste(levelDiff, collapse = ", "),
sep = ": "))
}
}
## fix those levels that don't match with data
## ignore "NA" as they will be considered as missing when converting categorical to factors
unique(house_train$MSZoning)
factorLevel$MSZoning
factorLevel$MSZoning[2] <- "C (all)"
unique(house_train$Neighborhood)
factorLevel$Neighborhood
factorLevel$Neighborhood[13] <- "NAmes"
unique(house_train$BldgType)
factorLevel$BldgType
factorLevel$BldgType[c(2,3,5)] <- c("2fmCon","Duplex","Twnhs")
unique(house_train$Exterior2nd)
factorLevel$Exterior2nd
factorLevel$Exterior2nd[c(17,6,3)] <- c("Wd Shng","CmentBd","Brk Cmn")
## Get levels that only appear in the dataset
for (varname in names(factorLevel)) {
factorLevel[[varname]] <- intersect(factorLevel[[varname]],
unique(house_train[[varname]]))
}
## Re-run the previous cell to double check
## convert column datatype to numeric / factor
## On training dataset
for (varname in names(house_train)[-1]) {
if (varname %in% names(factorLevel)) {
house_train[[varname]] <- factor(house_train[[varname]],
levels = factorLevel[[varname]])
} else {
house_train[[varname]] <- as.numeric(house_train[[varname]])
}
}
## On testing dataset
for (varname in names(house_test)[-1]) {
if (varname %in% names(factorLevel)) {
house_test[[varname]] <- factor(house_test[[varname]],
levels = factorLevel[[varname]])
} else {
house_test[[varname]] <- as.numeric(house_test[[varname]])
}
}
house_train$Id <- NULL
rownames(house_test) <- house_test$Id
house_test$Id <- NULL
save(house_test, file = "house_test.Rda" )
save(house_train, file =  "house_train.Rda")
name_vec <- c("MSZoning", "Neighborhood", "HouseStyle", "OverallQual", "YearBuilt", "ExterQual",
"Foundation", "BsmtQual", "X1stFlrSF", "X2ndFlrSF", "GrLivArea", "FullBath",
"TotRmsAbvGrd" ,"GarageFinish", "GarageCars", "GarageArea", "GarageQual",
"GarageCond", "PavedDrive", "SaleType", "SaleCondition", "SalePrice")
train_sub <- house_train %>% select(., name_vec)
col_missing <- names(train_sub[colSums(is.na(train_sub)) > 0])
missing_df <- train_sub[,col_missing]
aggr(missing_df)
Filter(function(x) x > 0, colSums(is.na(missing_df)))
missing_df <- train_sub[rowSums(is.na(train_sub))>0,] #checking all observations with missing
train_sub[rowSums(is.na(train_sub))>3,] #checking observations with all 4 variables missing
table()
missing_df <- train_sub[rowSums(is.na(train_sub))>0,] #checking all observations with missing
train_sub[rowSums(is.na(train_sub))>3,] #checking observations with all 4 variables missing
train_sub <- data.table(train_sub)
train_sub[is.na(train_sub$BsmtQual), BsmtQual := "None"]
train_sub[is.na(train_sub$GarageFinish), GarageFinish := "None"]
train_sub[is.na(train_sub$GarageQual), GarageQual := "None"]
train_sub[is.na(train_sub$GarageCond), GarageCond := "None"]
train_sub[PavedDrive == "N", PavedDrive := "None"]
#check levels
levels_sub = sapply(train_sub, function (x) levels(x))
save(train_sub, file = "train_sub.Rda")
x <-  train_sub[GarageFinish == "None" & GarageCars== 0,]
table(train_sub$GarageCars, train_sub$GarageFinish)
getwd()
write.csv(train_sub, file = "train_sub.csv",row.names = FALSE)
View(missing_df)
View(train_sub)
View(train_sub)
View(house_test)
View(house_train)
View(train_sub)
